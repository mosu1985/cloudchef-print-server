/**
 * CloudChef Print Server - Render.com Production Server
 * –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –º–µ–∂–¥—É –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∏ –∞–≥–µ–Ω—Ç–∞–º–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
 */

const express = require('express');
const { createServer } = require('http');
const { Server } = require('socket.io');
const cors = require('cors');
const path = require('path');
const { authMiddleware } = require('./middleware/auth');
const { websocketAuth, rateLimitMiddleware, ALLOWED_ORIGINS } = require('./middleware/websocket-auth');

const app = express();
const server = createServer(app);

// üóÑÔ∏è In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Redis)
const connections = new Map(); // –∫–æ–¥ -> { browser, agent, metadata }
const agents = new Map();      // socketId -> agentInfo
const browsers = new Map();    // socketId -> browserInfo

// üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function generateConnectionId() {
  return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

// üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
function log(level, message, data = {}) {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] [${level.toUpperCase()}] ${message}`, 
              Object.keys(data).length > 0 ? JSON.stringify(data, null, 2) : '');
}

// üîß Middleware - –ë–ï–ó–û–ü–ê–°–ù–´–ô CORS
app.use(cors({
  origin: ALLOWED_ORIGINS,
  methods: ["GET", "POST", "OPTIONS"],
  credentials: true // –í–∫–ª—é—á–∞–µ–º credentials –¥–ª—è JWT
}));

app.use(express.json());

// üîê Middleware –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω-–º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use(authMiddleware);

app.use(express.static(path.join(__dirname)));

// üåê –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∞–¥–º–∏–Ω –ª–æ–≥–∏–Ω
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'admin-login.html'));
});

// üîê –ó–∞—â–∏—â—ë–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (test.html)
app.get('/test.html', (req, res) => {
  res.sendFile(path.join(__dirname, 'test.html'));
});

// ‚ù§Ô∏è Health check –¥–ª—è Render.com
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    uptime: process.uptime(),
    connections: connections.size,
    agents: agents.size,
    browsers: browsers.size,
    timestamp: new Date().toISOString()
  });
});

// üìä API –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/api/stats', (req, res) => {
  res.json({
    connections: connections.size,
    agents: agents.size,
    browsers: browsers.size,
    uptime: process.uptime(),
    timestamp: new Date().toISOString()
  });
});

// üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO —Å–µ—Ä–≤–µ—Ä–∞ —Å –ë–ï–ó–û–ü–ê–°–ù–û–ô –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
const io = new Server(server, {
  cors: {
    origin: ALLOWED_ORIGINS, // ‚úÖ –¢–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    methods: ["GET", "POST"],
    credentials: true // ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ JWT cookies
  },
  transports: ['websocket', 'polling'],
  pingTimeout: 60000,
  pingInterval: 25000
});

// üõ°Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï MIDDLEWARE –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
io.use(rateLimitMiddleware); // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
io.use(websocketAuth);       // JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è

log('info', 'üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CloudChef Print Server —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é...');

// üì° –û–±—Ä–∞–±–æ—Ç–∫–∞ –ê–£–¢–ï–ù–¢–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–• –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
io.on('connection', (socket) => {
  // –¢–µ–ø–µ—Ä—å –∑–¥–µ—Å—å –≤—Å–µ —Å–æ–∫–µ—Ç—ã —É–∂–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã!
  const { userId, userEmail, clientType, authenticated } = socket;
  const connectionId = generateConnectionId();
  log('info', 'üîå –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', { 
    socketId: socket.id, 
    connectionId,
    address: socket.handshake.address 
  });

  // üéØ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ê–ì–ï–ù–¢–ê –ü–†–ò–ù–¢–ï–†–ê
  socket.on('register_agent', (data) => {
    const { code, printerInfo = {}, version = 'unknown' } = data;
    
    if (!code || code.length !== 6) {
      socket.emit('error', { 
        type: 'INVALID_CODE', 
        message: '–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Ü–∏—Ñ—Ä' 
      });
      return;
    }

    log('info', 'üñ®Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞', {
      socketId: socket.id,
      code,
      printerInfo,
      version
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
    const agentInfo = {
      socketId: socket.id,
      code,
      printerInfo,
      version,
      status: 'connected',
      connectedAt: new Date().toISOString(),
      lastSeen: new Date().toISOString()
    };

    agents.set(socket.id, agentInfo);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∫—É code -> connections
    const connection = connections.get(code) || {};
    connection.agent = socket;
    connection.agentInfo = agentInfo;
    connections.set(code, connection);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞ –æ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    socket.emit('registered', {
      status: 'success',
      message: '–ê–≥–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ',
      connectionId,
      code
    });

    // –ï—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω —Å —ç—Ç–∏–º –∫–æ–¥–æ–º - —É–≤–µ–¥–æ–º–ª—è–µ–º –µ–≥–æ
    if (connection.browser) {
      connection.browser.emit('agent_connected', {
        code,
        agentInfo: {
          printerName: printerInfo.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä',
          printerStatus: printerInfo.status || 'ready',
          version
        },
        connectedAt: agentInfo.connectedAt
      });
      
      log('info', '‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É–≤–µ–¥–æ–º–ª—ë–Ω –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞', { code });
    }
  });

  // üåê –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –í–ï–ë-–ë–†–ê–£–ó–ï–†–ê  
  socket.on('register_browser', (data) => {
    const { code, userInfo = {} } = data;
    
    if (!code || code.length !== 6) {
      socket.emit('error', { 
        type: 'INVALID_CODE', 
        message: '–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Ü–∏—Ñ—Ä' 
      });
      return;
    }

    log('info', 'üåê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–µ–±-–±—Ä–∞—É–∑–µ—Ä–∞', {
      socketId: socket.id,
      code,
      userInfo
    });

    const browserInfo = {
      socketId: socket.id,
      code,
      userInfo,
      status: 'connected',
      connectedAt: new Date().toISOString(),
      lastSeen: new Date().toISOString()
    };

    browsers.set(socket.id, browserInfo);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∫—É code -> connections
    const connection = connections.get(code) || {};
    connection.browser = socket;
    connection.browserInfo = browserInfo;
    connections.set(code, connection);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä –æ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    socket.emit('registered', {
      status: 'success',
      message: '–ë—Ä–∞—É–∑–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ',
      connectionId,
      code
    });

    // –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω —Å —ç—Ç–∏–º –∫–æ–¥–æ–º - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    if (connection.agent && connection.agentInfo) {
      socket.emit('agent_connected', {
        code,
        agentInfo: {
          printerName: connection.agentInfo.printerInfo.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä',
          printerStatus: connection.agentInfo.printerInfo.status || 'ready',
          version: connection.agentInfo.version
        },
        connectedAt: connection.agentInfo.connectedAt
      });

      log('info', '‚úÖ –ë—Ä–∞—É–∑–µ—Ä –ø–æ–ª—É—á–∏–ª —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞', { code });
    } else {
      // –ê–≥–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
      socket.emit('agent_disconnected', {
        code,
        message: '–ê–≥–µ–Ω—Ç –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'
      });
    }
  });

  // üñ®Ô∏è –ö–û–ú–ê–ù–î–ê –ü–ï–ß–ê–¢–ò –û–¢ –ë–†–ê–£–ó–ï–†–ê
  socket.on('print_command', (data) => {
    const browserInfo = browsers.get(socket.id);
    
    if (!browserInfo) {
      socket.emit('error', { 
        type: 'NOT_REGISTERED', 
        message: '–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' 
      });
      return;
    }

    const connection = connections.get(browserInfo.code);
    
    if (!connection || !connection.agent) {
      socket.emit('print_error', { 
        type: 'AGENT_OFFLINE', 
        message: '–ê–≥–µ–Ω—Ç –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω',
        code: browserInfo.code 
      });
      return;
    }

    log('info', 'üñ®Ô∏è –ö–æ–º–∞–Ω–¥–∞ –ø–µ—á–∞—Ç–∏ –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞', {
      code: browserInfo.code,
      labelData: data.labelData ? '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      jobId: data.jobId
    });

    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—á–∞—Ç–∏ –∞–≥–µ–Ω—Ç—É - –ò–°–ü–†–ê–í–õ–ï–ù–û –ù–ê 'print_job'!
    connection.agent.emit('print_job', {
      jobId: data.jobId || `job_${Date.now()}`,
      labelData: data.labelData,
      settings: data.settings || {},
      priority: data.priority || 'normal',
      timestamp: new Date().toISOString(),
      from: 'browser'
    });

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—É, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
    socket.emit('print_sent', {
      jobId: data.jobId,
      message: '–ö–æ–º–∞–Ω–¥–∞ –ø–µ—á–∞—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–≥–µ–Ω—Ç—É',
      timestamp: new Date().toISOString()
    });
  });

  // ‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–ï–ß–ê–¢–ò –û–¢ –ê–ì–ï–ù–¢–ê
  socket.on('print_result', (data) => {
    const agentInfo = agents.get(socket.id);
    
    if (!agentInfo) {
      log('warn', '‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—á–∞—Ç–∏ –æ—Ç –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞', { socketId: socket.id });
      return;
    }

    const connection = connections.get(agentInfo.code);
    
    if (connection && connection.browser) {
      // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–∞—É–∑–µ—Ä—É
      connection.browser.emit('print_result', {
        jobId: data.jobId,
        status: data.status, // 'success', 'error', 'cancelled'
        message: data.message,
        timestamp: data.timestamp || new Date().toISOString()
      });

      log('info', '‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—á–∞—Ç–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω –±—Ä–∞—É–∑–µ—Ä—É', {
        code: agentInfo.code,
        jobId: data.jobId,
        status: data.status
      });
    }
  });

  // üíì KEEP-ALIVE –æ—Ç –∞–≥–µ–Ω—Ç–∞
  socket.on('agent_heartbeat', (data) => {
    const agentInfo = agents.get(socket.id);
    if (agentInfo) {
      agentInfo.lastSeen = new Date().toISOString();
      agentInfo.printerInfo = { ...agentInfo.printerInfo, ...data.printerInfo };
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
      const connection = connections.get(agentInfo.code);
      if (connection && connection.browser) {
        connection.browser.emit('agent_status_update', {
          code: agentInfo.code,
          printerInfo: agentInfo.printerInfo,
          lastSeen: agentInfo.lastSeen
        });
      }
    }
  });

  // üîå –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï
  socket.on('disconnect', (reason) => {
    log('info', 'üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ', { 
      socketId: socket.id, 
      reason 
    });

    // –ü–æ–∏—Å–∫ –∏ –æ—á–∏—Å—Ç–∫–∞ –∞–≥–µ–Ω—Ç–∞
    const agentInfo = agents.get(socket.id);
    if (agentInfo) {
      agents.delete(socket.id);
      
      const connection = connections.get(agentInfo.code);
      if (connection) {
        connection.agent = null;
        connection.agentInfo = null;
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞
        if (connection.browser) {
          connection.browser.emit('agent_disconnected', {
            code: agentInfo.code,
            message: '–ê–≥–µ–Ω—Ç –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –æ—Ç–∫–ª—é—á–∏–ª—Å—è',
            reason
          });
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ - —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∫—É
        if (!connection.browser) {
          connections.delete(agentInfo.code);
        }
      }
      
      log('info', 'üñ®Ô∏è –ê–≥–µ–Ω—Ç –ø—Ä–∏–Ω—Ç–µ—Ä–∞ —É–¥–∞–ª–µ–Ω', { 
        code: agentInfo.code, 
        socketId: socket.id 
      });
    }

    // –ü–æ–∏—Å–∫ –∏ –æ—á–∏—Å—Ç–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
    const browserInfo = browsers.get(socket.id);
    if (browserInfo) {
      browsers.delete(socket.id);
      
      const connection = connections.get(browserInfo.code);
      if (connection) {
        connection.browser = null;
        connection.browserInfo = null;
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ - —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∫—É
        if (!connection.agent) {
          connections.delete(browserInfo.code);
        }
      }
      
      log('info', 'üåê –ë—Ä–∞—É–∑–µ—Ä —É–¥–∞–ª–µ–Ω', { 
        code: browserInfo.code, 
        socketId: socket.id 
      });
    }
  });

  // ‚ùå –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
  socket.on('error', (error) => {
    log('error', '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞', { 
      socketId: socket.id, 
      error: error.message,
      stack: error.stack
    });
  });
});

// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(() => {
  log('info', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', {
    connections: connections.size,
    agents: agents.size,
    browsers: browsers.size,
    uptime: process.uptime()
  });
}, 30000);

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;

server.listen(PORT, () => {
  log('info', '‚úÖ CloudChef Print Server –∑–∞–ø—É—â–µ–Ω', {
    port: PORT,
    environment: process.env.NODE_ENV || 'development',
    timestamp: new Date().toISOString()
  });
});

// üõë Graceful shutdown
process.on('SIGTERM', () => {
  log('info', 'üõë –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  server.close(() => {
    log('info', '‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
});

process.on('SIGINT', () => {
  log('info', 'üõë –ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  server.close(() => {
    log('info', '‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
});
