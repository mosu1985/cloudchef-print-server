// üîê Middleware –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏—è–º
// –ó–∞—â–∏—â–∞–µ—Ç test.html –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

const AUTHORIZED_USERS = [
  'mosu1985@gmail.com', // –û—Å–Ω–æ–≤–Ω–æ–π —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω
  // –î–æ–±–∞–≤–ª—è–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–¥–µ—Å—å
];

const ADMIN_ROUTES = [
  '/test.html',
  '/admin',
  '/api/admin',
  '/api/stats',
  '/api/logs'
];

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏—è–º
 * @param {string} userEmail - Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
 * @returns {boolean} - –ò–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
 */
function isAuthorizedUser(userEmail) {
  return AUTHORIZED_USERS.includes(userEmail);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Ä—à—Ä—É—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º
 * @param {string} path - –ü—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞
 * @returns {boolean} - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Ä—à—Ä—É—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º
 */
function isAdminRoute(path) {
  return ADMIN_ROUTES.some(route => path.startsWith(route));
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–º–∞—Ä—à—Ä—É—Ç–∞–º
 * @param {Request} req - Express request object
 * @param {Response} res - Express response object  
 * @param {Function} next - Next middleware function
 */
function authMiddleware(req, res, next) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω-–º–∞—Ä—à—Ä—É—Ç—ã
  if (!isAdminRoute(req.path)) {
    return next();
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
  const authHeader = req.headers.authorization;
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({
      error: 'Unauthorized',
      message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏',
      redirectTo: '/login'
    });
  }

  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
    // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    const decoded = JSON.parse(Buffer.from(token, 'base64').toString());
    
    if (!decoded.email || !isAuthorizedUser(decoded.email)) {
      return res.status(403).json({
        error: 'Forbidden',
        message: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏',
        requiredRole: 'superadmin'
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ request
    req.user = decoded;
    next();
    
  } catch (error) {
    return res.status(401).json({
      error: 'Invalid Token',
      message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
    });
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * (–í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å JWT)
 * @param {string} email - Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {string} - –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
function generateTestToken(email) {
  return Buffer.from(JSON.stringify({ 
    email, 
    role: 'superadmin',
    exp: Date.now() + 24 * 60 * 60 * 1000 // 24 —á–∞—Å–∞
  })).toString('base64');
}

module.exports = {
  authMiddleware,
  isAuthorizedUser,
  isAdminRoute,
  generateTestToken
};

