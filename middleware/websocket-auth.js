/**
 * WebSocket Authentication Middleware for CloudChef Print Server
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç JWT —Ç–æ–∫–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 */

const jwt = require('jsonwebtoken');

// –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö origins –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
const ALLOWED_ORIGINS = [
  'https://cloudchef.app',
  'https://www.cloudchef.app',
  'http://localhost:3000', // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  'http://localhost:5173', // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Vite
  'http://localhost:5174'  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç Vite
];

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ WebSocket –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * @param {Socket} socket - Socket.IO socket instance
 * @param {Function} next - Callback —Ñ—É–Ω–∫—Ü–∏—è
 */
function websocketAuth(socket, next) {
  try {
    // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º origin –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const origin = socket.handshake.headers.origin;

    // –í production –±–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ origin —è–≤–Ω–æ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
    // –ù–û —Ä–∞–∑—Ä–µ—à–∞–µ–º localhost –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–¥–∞–∂–µ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤ production)
    const isLocalhost = origin && (origin.includes('localhost') || origin.includes('127.0.0.1'));
    const isAllowedOrigin = ALLOWED_ORIGINS.includes(origin);

    if (process.env.NODE_ENV === 'production' && !isAllowedOrigin && !isLocalhost) {
      console.warn(`‚ö†Ô∏è –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π origin: ${origin}`);
      return next(new Error(`–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π origin: ${origin}`));
    }

    console.log(`‚úÖ Origin —Ä–∞–∑—Ä–µ—à–µ–Ω: ${origin}`);

    // üîë –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ auth –∏–ª–∏ query
    const token = socket.handshake.auth?.token || 
                 socket.handshake.headers.authorization?.replace('Bearer ', '') ||
                 socket.handshake.query?.token;

    if (!token) {
      return next(new Error('–¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'));
    }

    // üìä –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (browser –∏–ª–∏ agent)
    const clientType = socket.handshake.query?.clientType || 'unknown';
    
    if (clientType === 'browser') {
      // üåê –î–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ —Ç—Ä–µ–±—É–µ–º JWT —Ç–æ–∫–µ–Ω –æ—Ç Supabase
      verifySupabaseToken(token, (err, decoded) => {
        if (err) {
          return next(new Error(`–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π JWT: ${err.message}`));
        }
        
        socket.userId = decoded.sub; // Supabase user ID
        socket.userEmail = decoded.email;
        socket.clientType = 'browser';
        socket.authenticated = true;
        
        console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${decoded.email} (${decoded.sub})`);
        next();
      });
    } else if (clientType === 'agent') {
      // üñ®Ô∏è –î–ª—è –∞–≥–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª—é—á–∏ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
      verifyAgentToken(token, (err, agentInfo) => {
        if (err) {
          return next(new Error(`–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≥–µ–Ω—Ç–∞: ${err.message}`));
        }
        
        socket.agentId = agentInfo.agentId;
        socket.restaurantCode = agentInfo.restaurantCode;
        socket.clientType = 'agent';
        socket.authenticated = true;
        
        console.log(`‚úÖ –ê–≥–µ–Ω—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${agentInfo.agentId} –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ ${agentInfo.restaurantCode}`);
        next();
      });
    } else {
      return next(new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞: ${clientType}`));
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    next(new Error('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'));
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç JWT —Ç–æ–∫–µ–Ω –æ—Ç Supabase
 * @param {string} token - JWT —Ç–æ–∫–µ–Ω
 * @param {Function} callback - Callback(error, decoded)
 */
function verifySupabaseToken(token, callback) {
  // –í production –Ω—É–∂–µ–Ω –Ω–∞—Å—Ç–æ—è—â–∏–π Supabase JWT secret
  const supabaseJwtSecret = process.env.SUPABASE_JWT_SECRET;
  
  if (!supabaseJwtSecret) {
    console.warn('‚ö†Ô∏è SUPABASE_JWT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É');
    // –î–ª—è MVP –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ JWT
    const parts = token.split('.');
    if (parts.length !== 3) {
      return callback(new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JWT'));
    }
    
    try {
      const payload = JSON.parse(atob(parts[1]));
      if (!payload.sub || !payload.email) {
        return callback(new Error('JWT –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'));
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
      if (payload.exp && payload.exp < Date.now() / 1000) {
        return callback(new Error('JWT –∏—Å—Ç–µ–∫'));
      }
      
      return callback(null, payload);
    } catch (err) {
      return callback(new Error('–ù–µ —É–¥–∞–µ—Ç—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JWT'));
    }
  }
  
  // –° –Ω–∞—Å—Ç–æ—è—â–∏–º secret –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
  jwt.verify(token, supabaseJwtSecret, { algorithms: ['HS256'] }, callback);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω –∞–≥–µ–Ω—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å API –∫–ª—é—á –∏–ª–∏ JWT)
 * @param {string} token - –¢–æ–∫–µ–Ω –∞–≥–µ–Ω—Ç–∞
 * @param {Function} callback - Callback(error, agentInfo)
 */
function verifyAgentToken(token, callback) {
  // –î–ª—è –∞–≥–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—É—é —Å—Ö–µ–º—É —Å API –∫–ª—é—á–∞–º–∏
  // –§–æ—Ä–º–∞—Ç: agent_<restaurantCode>_<randomKey>
  const agentKeyPattern = /^agent_([A-Z0-9]{6})_([a-zA-Z0-9]{32})$/;
  const match = token.match(agentKeyPattern);
  
  if (!match) {
    return callback(new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≥–µ–Ω—Ç–∞'));
  }
  
  const [, restaurantCode, apiKey] = match;
  
  // TODO: –í production –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  // –°–µ–π—á–∞—Å –¥–ª—è MVP –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
  callback(null, {
    agentId: `agent_${restaurantCode}`,
    restaurantCode: restaurantCode,
    apiKey: apiKey
  });
}

/**
 * Rate limiting –¥–ª—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 */
const connectionLimits = new Map();

function rateLimitMiddleware(socket, next) {
  const ip = socket.handshake.address;
  const now = Date.now();
  const windowMs = 60000; // 1 –º–∏–Ω—É—Ç–∞
  const maxConnections = 10; // –ú–∞–∫—Å–∏–º—É–º 10 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É —Å –æ–¥–Ω–æ–≥–æ IP
  
  if (!connectionLimits.has(ip)) {
    connectionLimits.set(ip, []);
  }
  
  const connections = connectionLimits.get(ip);
  const recentConnections = connections.filter(time => now - time < windowMs);
  
  if (recentConnections.length >= maxConnections) {
    return next(new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Å –≤–∞—à–µ–≥–æ IP'));
  }
  
  recentConnections.push(now);
  connectionLimits.set(ip, recentConnections);
  
  next();
}

module.exports = {
  websocketAuth,
  rateLimitMiddleware,
  ALLOWED_ORIGINS
};



